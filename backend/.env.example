# =================================================================
#              .ENV.EXAMPLE - NoesisForge Configuration Template
# =================================================================
# 
# INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Update the values below with your specific configuration
# 3. Never commit your .env file to version control
#
# =================================================================

# --------------------------------------------------
# GENERAL APPLICATION CONFIGURATION
# --------------------------------------------------
# Environment: development, production, test
ENVIRONMENT=development

# --------------------------------------------------
# SERVER CONFIGURATION
# --------------------------------------------------
PORT=8000
# Gin mode: debug, release
GIN_MODE=debug

# --------------------------------------------------
# DATABASE CONFIGURATION (PostgreSQL)
# --------------------------------------------------
# Format: postgres://username:password@host:port/database?options
DATABASE_URL=postgres://YOUR_DB_USER:YOUR_DB_PASSWORD@localhost:5432/YOUR_DB_NAME?sslmode=disable
DB_MAX_OPEN_CONNS=100
DB_MAX_IDLE_CONNS=10
DB_CONN_MAX_LIFETIME=1h
# GORM log level: silent, error, warn, info
DB_LOG_LEVEL=error

# --------------------------------------------------
# JWT CONFIGURATION
# --------------------------------------------------
# IMPORTANT: Generate a strong, unique secret for production!
# You can use: openssl rand -base64 64
JWT_SECRET=YOUR_SUPER_SECRET_JWT_KEY_CHANGE_THIS_IN_PRODUCTION
JWT_EXPIRES_IN=24h
JWT_REFRESH_EXPIRES_IN=168h

# --------------------------------------------------
# MINIO (S3 Compatible Object Storage) CONFIGURATION
# --------------------------------------------------
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY_ID=YOUR_MINIO_ACCESS_KEY
MINIO_SECRET_ACCESS_KEY=YOUR_MINIO_SECRET_KEY
MINIO_USE_SSL=false
MINIO_BUCKET_NAME=noesis-documents
MINIO_REGION=us-east-1

# =================================================================
#              FUTURE FEATURES (Currently Commented Out)
# =================================================================
# These configurations will be used when we implement additional features.
# For now, they are commented out to keep the configuration simple.

# --------------------------------------------------
# REDIS CACHE CONFIGURATION
# --------------------------------------------------
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=YOUR_REDIS_PASSWORD
# REDIS_DB=0
# REDIS_POOL_SIZE=10
# REDIS_MIN_IDLE_CONNS=5
# REDIS_DIAL_TIMEOUT=5s
# REDIS_READ_TIMEOUT=3s
# REDIS_WRITE_TIMEOUT=3s

# --------------------------------------------------
# RABBITMQ (Message Broker) CONFIGURATION
# --------------------------------------------------
# RABBITMQ_URL=amqp://YOUR_RABBITMQ_USER:YOUR_RABBITMQ_PASSWORD@localhost:5672/
# RABBITMQ_EXCHANGE=noesis-forge
# RABBITMQ_EXCHANGE_TYPE=topic
# RABBITMQ_QUEUE_PREFIX=noesis
# RABBITMQ_DURABLE=true
# RABBITMQ_AUTO_DELETE=false
# RABBITMQ_RECONNECT_DELAY=5s
# RABBITMQ_PREFETCH_COUNT=10

# --------------------------------------------------
# QDRANT (Vector Database) CONFIGURATION
# --------------------------------------------------
# QDRANT_URL=http://localhost:6333
# QDRANT_API_KEY=YOUR_QDRANT_API_KEY
# QDRANT_COLLECTION_PREFIX=noesis
# QDRANT_VECTOR_SIZE=1024
# # Distance metric: Cosine, Dot, Euclid
# QDRANT_DISTANCE=Cosine
# QDRANT_TIMEOUT=30s

# --------------------------------------------------
# OLLAMA (Large Language Model) CONFIGURATION
# --------------------------------------------------
# OLLAMA_URL=http://localhost:11434
# # Available models: llama3, mistral, codellama, etc.
# OLLAMA_MODEL=llama3
# OLLAMA_TEMPERATURE=0.7
# OLLAMA_MAX_TOKENS=2048
# OLLAMA_TIMEOUT=120s
# OLLAMA_STREAM_TIMEOUT=300s

# --------------------------------------------------
# EMAIL SERVICE CONFIGURATION
# --------------------------------------------------
# # Provider: smtp, sendgrid, ses
# EMAIL_PROVIDER=smtp
# EMAIL_FROM=noreply@yourdomain.com
# EMAIL_FROM_NAME="NoesisForge"

# # SMTP Settings (if EMAIL_PROVIDER=smtp)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your.email@gmail.com
# SMTP_PASSWORD=your_app_password
# # Encryption: tls, ssl, none
# SMTP_ENCRYPTION=tls

# # Alternative providers
# SENDGRID_API_KEY=YOUR_SENDGRID_API_KEY
# AWS_REGION=us-east-1

# --------------------------------------------------
# CORS (Cross-Origin Resource Sharing) CONFIGURATION
# --------------------------------------------------
# # Add your frontend URLs here
# CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
# CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
# CORS_ALLOWED_HEADERS=Origin,Content-Type,Accept,Authorization
# CORS_EXPOSED_HEADERS=Content-Length
# CORS_ALLOW_CREDENTIALS=true
# CORS_MAX_AGE=12h

# --------------------------------------------------
# METRICS (Prometheus) CONFIGURATION
# --------------------------------------------------
# METRICS_ENABLED=true
# METRICS_PORT=9090
# METRICS_PATH=/metrics
# METRICS_NAMESPACE=noesis_forge

# --------------------------------------------------
# LOGGING CONFIGURATION
# --------------------------------------------------
# # Log level: debug, info, warn, error, fatal, panic
# LOG_LEVEL=info
# # Log format: json, text
# LOG_FORMAT=json
# LOG_OUTPUT_PATH=stdout
# LOG_ERROR_OUTPUT_PATH=stderr
# LOG_ENABLE_CALLER=false
# LOG_ENABLE_STACKTRACE=false

# --------------------------------------------------
# AUTHENTICATION & SECURITY POLICY CONFIGURATION
# --------------------------------------------------
# DEFAULT_ROLE_NAME=user
# PASSWORD_MIN_LENGTH=8
# PASSWORD_REQUIRE_SPECIAL=true
# PASSWORD_REQUIRE_NUMBER=true
# PASSWORD_REQUIRE_UPPER=true
# PASSWORD_REQUIRE_LOWER=true
# MAX_LOGIN_ATTEMPTS=5
# LOGIN_ATTEMPT_WINDOW=15m
# ACCOUNT_LOCK_DURATION=30m

# =================================================================
# DEVELOPMENT NOTES:
# =================================================================
# 
# 1. For production, make sure to:
#    - Use strong, unique secrets for JWT_SECRET
#    - Set ENVIRONMENT=production
#    - Use SSL for database connections (sslmode=require)
#    - Set up proper CORS origins
#    - Configure email service for notifications
#    - Update MinIO credentials with secure values
#
# 2. For local development:
#    - Make sure PostgreSQL is running on localhost:5432
#    - Create a database named 'noesis_forge' or update DATABASE_URL
#    - Make sure MinIO is running on localhost:9000
#    - The default admin user will be created automatically:
#      Email: admin@example.com
#      Password: admin123
#
# 3. Required services for current features:
#    - PostgreSQL: Database
#    - MinIO: Object storage for documents
#
# 4. Optional services (for future features):
#    - Redis: docker run -p 6379:6379 redis:alpine
#    - RabbitMQ: docker run -p 5672:5672 -p 15672:15672 rabbitmq:management
#    - MinIO: docker run -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address ":9001"
#    - Qdrant: docker run -p 6333:6333 qdrant/qdrant
#    - Ollama: docker run -p 11434:11434 ollama/ollama
#
# =================================================================