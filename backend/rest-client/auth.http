###
# NoesisForge Authentication Endpoints
# Complete authentication flow testing
###

@baseUrl = http://localhost:8000/api/v1
@contentType = application/json

# Variables to store tokens (will be populated by responses)
@accessToken = 
@refreshToken = 
@adminAccessToken = 
@adminRefreshToken = 

###
# 1. Register New User
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "username": "testuser",
  "name": "Test User",
  "password": "testpassword123",
  "passwordConfirm": "testpassword123"
}

###
# 2. Register Another Test User
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "username": "johndoe",
  "name": "John Doe",
  "password": "johnpassword123",
  "passwordConfirm": "johnpassword123"
}

###
# 3. Login with Default Admin
# admin@example.com / admin123 (created during seeding)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "admin123"
}

> {% 
  if (response.status === 200) {
    client.global.set("adminAccessToken", response.body.tokens.accessToken);
    client.global.set("adminRefreshToken", response.body.tokens.refreshToken);
  }
%}

###
# 4. Login with Test User (by email)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "testpassword123"
}

> {% 
  if (response.status === 200) {
    client.global.set("accessToken", response.body.tokens.accessToken);
    client.global.set("refreshToken", response.body.tokens.refreshToken);
  }
%}

###
# 5. Login with Test User (by username)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "username": "testuser",
  "password": "testpassword123"
}

###
# 6. Login with Remember Option
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "johndoe@example.com",
  "password": "johnpassword123",
  "remember": true
}

###
# 7. Get User Profile (Protected Route)
GET {{baseUrl}}/auth/profile
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

###
# 8. Get Admin Profile (Protected Route)
GET {{baseUrl}}/auth/profile
Content-Type: {{contentType}}
Authorization: Bearer {{adminAccessToken}}

###
# 9. Update User Profile
PUT {{baseUrl}}/auth/profile
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "name": "Test User Updated",
  "bio": "This is my updated bio",
  "username": "testuser_updated"
}

###
# 10. Change Password
PUT {{baseUrl}}/auth/change-password
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
  "oldPassword": "testpassword123",
  "newPassword": "newpassword123"
}

###
# 11. Login with New Password
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "newpassword123"
}

###
# 12. Refresh Access Token
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

> {% 
  if (response.status === 200) {
    client.global.set("accessToken", response.body.tokens.accessToken);
    client.global.set("refreshToken", response.body.tokens.refreshToken);
  }
%}

###
# 13. Refresh Admin Token
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "{{adminRefreshToken}}"
}

> {% 
  if (response.status === 200) {
    client.global.set("adminAccessToken", response.body.tokens.accessToken);
    client.global.set("adminRefreshToken", response.body.tokens.refreshToken);
  }
%}

###
# 14. Logout User
POST {{baseUrl}}/auth/logout
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

###
# 15. Logout Admin
POST {{baseUrl}}/auth/logout
Content-Type: {{contentType}}

{
  "refreshToken": "{{adminRefreshToken}}"
}

###
# ERROR CASES
###

###
# 16. Invalid Login Credentials
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "wrong@example.com",
  "password": "wrongpassword"
}

###
# 17. Register with Existing Email
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "username": "newuser",
  "name": "New User",
  "password": "password123",
  "passwordConfirm": "password123"
}

###
# 18. Register with Password Mismatch
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "email": "mismatch@example.com",
  "username": "mismatch",
  "name": "Mismatch User",
  "password": "password123",
  "passwordConfirm": "differentpassword"
}

###
# 19. Access Protected Route Without Token
GET {{baseUrl}}/auth/profile
Content-Type: {{contentType}}

###
# 20. Access Protected Route With Invalid Token
GET {{baseUrl}}/auth/profile
Content-Type: {{contentType}}
Authorization: Bearer invalid_token_here

###
# 21. Refresh with Invalid Token
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "invalid_refresh_token"
}