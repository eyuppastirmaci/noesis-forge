services:
  backend:
    profiles: ["app"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_HOST=postgres
      - MINIO_ENDPOINT=minio:9000
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - noesis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8000/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    profiles: ["app"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./frontend/.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - INTERNAL_API_URL=http://backend:8000/api/v1
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - noesis-network

  postgres:
    profiles: ["infra"]
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: noesis_forge
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1997
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - noesis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    profiles: ["infra"]
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    env_file:
      - ./backend/.env
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: noesis-documents
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console (Web UI)
    volumes:
      - minio_data:/data
    networks:
      - noesis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    profiles: ["infra"]
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - noesis-network
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to start...';
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/noesis-documents --ignore-existing;
      /usr/bin/mc policy set public myminio/noesis-documents;
      echo 'MinIO bucket setup complete';
      "

  redis:
    profiles: ["infra"]
    image: redis:8.0.2-alpine
    container_name: noesis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - noesis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    profiles: ["infra"]
    image: rabbitmq:3.12-management
    container_name: noesis-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - noesis-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    profiles: ["infra"]
    image: qdrant/qdrant:latest
    container_name: noesis-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333" # REST API port
      - "6334:6334" # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__HTTP__MAX_REQUEST_SIZE_MB: 32
    networks:
      - noesis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:6333/",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  text-embedding-worker:
    profiles: ["workers"]
    build:
      context: ./workers
      dockerfile: Dockerfile
      target: runtime
    command: ["src/embedding/text-embedding.js"]
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - QDRANT_URL=http://qdrant:6333
      - MODELS_PATH=/app/models
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=noesis-documents
      - INTERNAL_API_URL=http://host.docker.internal:8000/api/v1
    networks:
      - noesis-network
    volumes:
      - ./workers/models:/app/models
      - worker_cache:/root/.cache
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3

  image-embedding-worker:
    profiles: ["workers"]
    build:
      context: ./workers
      dockerfile: Dockerfile
      target: runtime
    command: ["src/embedding/image-embedding.js"]
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - QDRANT_URL=http://qdrant:6333
      - MODELS_PATH=/app/models
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=noesis-documents
      - INTERNAL_API_URL=http://host.docker.internal:8000/api/v1
    networks:
      - noesis-network
    volumes:
      - ./workers/models:/app/models
      - worker_cache:/root/.cache
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3

  summary-worker:
    profiles: ["workers"]
    build:
      context: ./workers
      dockerfile: Dockerfile
      target: runtime
    command: ["src/summarization/summary-worker.js"]
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - MODELS_PATH=/app/models
      - SUMMARY_MAX_LENGTH=200
      - SUMMARY_MIN_LENGTH=50
      - SUMMARY_MAX_INPUT=1000
      - INTERNAL_API_URL=http://host.docker.internal:8000/api/v1
    networks:
      - noesis-network
    volumes:
      - ./workers/models:/app/models
      - worker_cache:/root/.cache
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  minio_data:
  redis_data:
  rabbitmq_data:
  qdrant_data:
  worker_cache:

networks:
  noesis-network:
    driver: bridge